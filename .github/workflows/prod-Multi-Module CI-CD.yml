

name: Prod-Multi-Module Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: "prod"

    outputs:
      common: ${{ steps.filter.outputs.common }}
      batch: ${{ steps.filter.outputs.job }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            common:
              - 'module-common/**'
            batch:
              - 'module-batch/**'

  build-and-deploy-batch:
    needs: changes
    if: ${{ needs.changes.outputs.batch == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 빌드 추가
      - name: Build with Gradle
        run: ./gradlew :module-batch:build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.BATCH_REPOSITORY_URI }}

      # Docker 이미지를 빌드하고 멀티 플랫폼으로 푸시
      - name: Build and push multi-platform image to ECR
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./module-batch/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.BATCH_REPOSITORY_URI }}

      - name: Start SSH Agent and Add Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy Batch to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} #EC2 HOST 종류 선택
          EC2_USER: ${{ secrets.EC2_USER }}
          BATCH_REPOSITORY_URI: ${{ secrets.BATCH_REPOSITORY_URI }}
        run: |
          ssh -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" << 'EOF'
            docker pull $BATCH_REPOSITORY_URI
            docker stop batch-container || true
            docker rm batch-container || true
            docker run -d --name batch-container -p 8081:8081 $BATCH_REPOSITORY_URI:$IMAGE_TAG
          EOF
    

  build-and-deploy-common:
    needs: changes
    if: ${{ needs.changes.outputs.common == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 빌드 추가
      - name: Build with Gradle
        run: ./gradlew :module-batch:build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.COMMON_REPOSITORY_URI }}

      # Docker 이미지를 빌드하고 멀티 플랫폼으로 푸시
      - name: Build and push multi-platform image to ECR
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./module-batch/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.COMMON_REPOSITORY_URI }}

      - name: Start SSH Agent and Add Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy Common to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} #EC2 HOST 종류 선택
          EC2_USER: ${{ secrets.EC2_USER }}
          BATCH_REPOSITORY_URI: ${{ secrets.COMMON_REPOSITORY_URI }}
        run: |
          ssh -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" << 'EOF'
            docker pull $BATCH_REPOSITORY_URI
            docker stop batch-container || true
            docker rm batch-container || true
            docker run -d --name batch-container -p 8082:8082 $COMMON_REPOSITORY_URI:$IMAGE_TAG
          EOF